{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","idx","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f24f506.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Context from '../context';\r\n\r\nconst styles = {\r\n  li: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '.5rem 1rem',\r\n    border: '1px solid #000',\r\n    borderRadius: '10px',\r\n    marginBottom: '.5rem'\r\n  },\r\n  input: {\r\n    marginRight: '1rem'\r\n  }\r\n}\r\n\r\nfunction TodoItem({ todo, idx, onChange }) {\r\n  const {removeTodo} = useContext(Context)\r\n  const classes = []\r\n\r\n  if (todo.completed) {\r\n    classes.push('done');\r\n  }\r\n\r\n  return (\r\n  <li style = {styles.li}>\r\n    <span className={classes.join(' ')}>\r\n      <input \r\n      type=\"checkbox\" \r\n      checked={todo.completed}\r\n      style={styles.input} \r\n      onChange={() => onChange(todo.id)}/>\r\n      <strong>{idx + 1}</strong>\r\n      &nbsp;\r\n      {todo.title}\r\n    </span>\r\n      <button className=\"rm\"  onClick={() => removeTodo(todo.id)}>&times;</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  onChange: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: 'none',\r\n    margin: 0,\r\n    padding: 0,\r\n  }\r\n}\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      { props.todos.map((todo, idx) => {\r\n        return (\r\n        <TodoItem \r\n          todo={ todo }\r\n          key={todo.id} \r\n          idx={idx} \r\n          onChange={props.onToggle} \r\n        />\r\n        )\r\n      }) }\r\n    </ul>\r\n  )\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoList","import React from 'react';\r\n\r\nexport default () => <div className=\"lds-circle\"><div/></div>","import React from 'react'\r\nimport './Modal.css'\r\n\r\nexport default class Modal extends React.Component {\r\n  state = {\r\n    isOpen: false,\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={() => this.setState({isOpen: true})}>\r\n          Open Modal\r\n          </button>\r\n\r\n        {this.state.isOpen && \r\n        (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-body\">\r\n            <h1>Modal Title</h1>\r\n            <p>I'm awesome modal!</p>\r\n            <button onClick={() => this.setState({isOpen: false})}>Close Modal</button>\r\n          </div>\r\n        </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}","import React, {useEffect} from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context';\nimport Loader from './Loader';\nimport Modal from './Modal/Modal';\n\nconst AddTodo = React.lazy(\n  () => \n    new Promise(resolve => {\n      setTimeout(() => {\n        resolve(import('./Todo/AddTodo'))\n      }, 2300)\n    })\n)\n\nfunction App() {\n  const [todos, setTodos] = React.useState([])\n  const [loading, setLoading] = React.useState(true)\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos (todos)\n          setLoading(false)\n        }, 2000)\n      })\n  }, [])\n\n    function toggleTodo(id) {\n      setTodos(\n        todos.map(todo => {\n          if (todo.id === id) {\n            todo.completed = !todo.completed;\n          }\n          return todo;\n        })\n      )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(todos.concat([{\n      title,\n      id: Date.now(),\n      completed: false,\n    }]))\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>React tutorial</h1>\n\n        <Modal />\n\n        <React.Suspense fallback={\"\"}>\n          <AddTodo onCreate={addTodo} />\n        </React.Suspense>\n\n        {loading && <Loader />}\n        {todos.length ? \n        (<TodoList todos={todos} onToggle={toggleTodo}/>\n        ) : loading ? null : (\n           <p>No todos!</p>\n        )}\n\n      </div>\n    </Context.Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}